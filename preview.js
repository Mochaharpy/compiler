// @ts-nocheck
function normalizeResource(e,t=document.baseURI){let r;try{r=new URL(e,t)}catch{return null}const n=new URL(t);if(r.origin===n.origin){const e=r.pathname.split("/");return e[e.length-1]}return r.href}function getHtmlDependencies(e,t=document.baseURI){const r={stylesheets:new Set,scripts:new Set,images:new Set,fonts:new Set,media:new Set},n=(e,r)=>{const n=normalizeResource(r,t);n&&e.add(n)},o=(new DOMParser).parseFromString(e,"text/html");return o.querySelectorAll('link[rel="stylesheet"]').forEach((e=>n(r.stylesheets,e.getAttribute("href")))),o.querySelectorAll("style").forEach((e=>{for(const[,t]of e.textContent.matchAll(/@import\s+['"]([^'"]+)['"]/g))n(r.stylesheets,t)})),o.querySelectorAll("script[src]").forEach((e=>n(r.scripts,e.getAttribute("src")))),o.querySelectorAll("img[src], source[src]").forEach((e=>n(r.images,e.getAttribute("src")))),o.querySelectorAll("audio[src], video[src], object[data]").forEach((e=>{const t=e.getAttribute("src")||e.getAttribute("data");n(r.media,t)})),o.querySelectorAll('link[rel="stylesheet"][href*="fonts.googleapis.com"]').forEach((e=>n(r.fonts,e.getAttribute("href")))),o.querySelectorAll("[style]").forEach((e=>{for(const[,t]of e.getAttribute("style").matchAll(/url\(\s*['"]?([^)'"]+)['"]?\s*\)/g))n(r.images,t)})),{stylesheets:[...r.stylesheets],scripts:[...r.scripts],images:[...r.images],fonts:[...r.fonts],media:[...r.media]}}function inlineAllDependencies(e,t,r=document.baseURI){const n=getHtmlDependencies(e,r),o=n.stylesheets,s=n.scripts,l=(new DOMParser).parseFromString(e,"text/html");return o.forEach((e=>{if(!getFileFromName(e))return;const t=getFileFromName(e).getValue();l.querySelectorAll(`link[rel="stylesheet"][href="${e}"]`).forEach((e=>{const r=l.createElement("style");r.textContent=t,e.replaceWith(r)}))})),s.forEach((e=>{if(!getFileFromName(e))return;const t=getFileFromName(e).getValue();l.querySelectorAll(`script[src="${e}"]`).forEach((r=>{const n=l.createElement("script");n.textContent=t+`\n//# sourceURL=${e}`,r.replaceWith(n)}))})),l.documentElement.outerHTML}const outputFrame=document.getElementById("outputFrame");let isFirstPreviewRun=!0;function previewFirstHtmlFile(){if(resetConsole&&ustomConsole&&ustomConsole.clearLogs(),firstHtmlFileId&&files[firstHtmlFileId]){let e=files[firstHtmlFileId].getValue();const t="\n  (() => {\n    const original = { ...console };\n\n    const methodsToOverride = [\n      'log', 'info', 'warn', 'error', 'debug', 'trace',\n      'table', 'dir', 'dirxml',\n      'assert', 'count', 'countReset',\n      'group', 'groupCollapsed', 'groupEnd',\n      'time', 'timeLog', 'timeEnd',\n      'clear'\n    ];\n\n    for (const method of methodsToOverride) {\n      if (typeof original[method] === 'function') {\n        console[method] = (...args) => {\n          window.parent.postMessage({ type: 'iframe-console', logType: method, args }, '*');\n          original[method](...args);\n        };\n      }\n    }\n\n    window.onerror = function(message, source, lineno, colno, error) {\n      const errorArgs = [\n        error?.stack || error\n      ];\n      window.parent.postMessage({ type: 'iframe-console', logType: 'error', args: errorArgs }, '*');\n      original.error(...errorArgs);\n      return true;\n    };\n  })();\n  ";let r=null;const n=()=>{let n=`<script>${t}<\/script>`+e;n=inlineAllDependencies(n,files),r&&URL.revokeObjectURL(r);const o=new Blob([n],{type:"text/html"});r=URL.createObjectURL(o),outputFrame.src=r};isFirstPreviewRun?(setTimeout(n,1e3),isFirstPreviewRun=!1):n()}else outputFrame.src=""}
